Total: 2932 samples
    2720  92.8%  92.8%     2932 100.0% thread_func
     127   4.3%  97.1%      149   5.1% SortedList_lookup
      69   2.4%  99.5%       69   2.4% __strcmp_sse42
      15   0.5% 100.0%       63   2.1% SortedList_insert
       1   0.0% 100.0%        1   0.0% _init
       0   0.0% 100.0%     2932 100.0% __clone
       0   0.0% 100.0%     2932 100.0% start_thread
ROUTINE ====================== thread_func in /u/ee/ugrad/daupo/CS111/lab2a/lab2_list.c
  2720   2932 Total samples (flat / cumulative)
     .      .   27: int n_iter = 1;
     .      .   28: SortedListElement_t* elements;
     .      .   29: SortedListElement_t head;
     .      .   30: 
     .      .   31: void *thread_func(void *arg)
---
     .      .   32: {
     .      .   33: 	int *offsets = (int *)arg;
     .      .   34: 	if(opt_sync == 0)
     .      .   35: 	{
     .      .   36: 		int i;
     .      .   37: 		for(i = 0; i < n_iter; i++)
     .      .   38: 			SortedList_insert(&head, &elements[*offsets + i]);
     .      .   39: 	}
     .      .   40: 	else
     .      .   41: 	{	
     .      .   42: 		int i;
     .      .   43: 		for(i = 0; i < n_iter; i++)
     .      .   44: 		{
     .      .   45: 			switch (sync_op) 
     .      .   46: 			{
     .      .   47: 		      	case 'm':
     .      .   48: 		   		pthread_mutex_lock(&mutex);
     .      .   49: 		   		SortedList_insert(&head, &elements[*offsets + i]);
     .      .   50: 		   		pthread_mutex_unlock(&mutex);
     .      .   51: 		        break;
     .      .   52: 		      	case 's':
  2113   2113   53: 		        while (__sync_lock_test_and_set(&spin, 1));
     .     63   54: 			    SortedList_insert(&head, &elements[*offsets + i]);
     .      .   55: 			    __sync_lock_release(&spin);
     .      .   56: 		        break;
     .      .   57: 	    	}
     .      .   58: 	    }
     .      .   59:     }
     .      .   60:     int check;
     .      .   61:     if(opt_sync == 0)
     .      .   62: 		{
     .      .   63: 			check = SortedList_length(&head);
     .      .   64: 			if(check < 0)
     .      .   65: 			{
     .      .   66: 				fprintf(stderr, "Error! Corrupted linked list\n");
     .      .   67: 				exit(1);
     .      .   68: 			}
     .      .   69: 		}
     .      .   70: 	else
     .      .   71: 	{	
     .      .   72: 		switch (sync_op) 
     .      .   73: 		{
     .      .   74: 	      	case 'm':
     .      .   75: 	   		pthread_mutex_lock(&mutex);
     .      .   76: 			check = SortedList_length(&head);
     .      .   77: 			if(check < 0)
     .      .   78: 			{
     .      .   79: 				fprintf(stderr, "Error! Corrupted linked list\n");
     .      .   80: 				exit(1);
     .      .   81: 			}
     .      .   82: 	   		pthread_mutex_unlock(&mutex);
     .      .   83: 	        break;
     .      .   84: 	      	case 's':
     4      4   85: 	        while (__sync_lock_test_and_set(&spin, 1));
     .      .   86: 			check = SortedList_length(&head);
     .      .   87: 			if(check < 0)
     .      .   88: 			{
     .      .   89: 				fprintf(stderr, "Error! Corrupted linked list\n");
     .      .   90: 				exit(1);
     .      .   91: 			}
     .      .   92: 		    __sync_lock_release(&spin);
     .      .   93: 	        break;
     .      .   94:     	}
     .      .   95:     }
     .      .   96: 
     .      .   97:     SortedListElement_t *temp;
     .      .   98: 	if(opt_sync == 0)
     .      .   99: 	{
     .      .  100: 		int i;
     .      .  101: 		for(i = 0; i < n_iter; i++)
     .      .  102: 		{
     .      .  103: 			temp = SortedList_lookup(&head, elements[*offsets + i].key);
     .      .  104: 			if(temp == NULL)
     .      .  105: 			{
     .      .  106: 				fprintf(stderr, "Error! Corrupted linked list\n");
     .      .  107: 				exit(1);
     .      .  108: 			}
     .      .  109: 			check = SortedList_delete(temp);
     .      .  110: 			if(check == 1)
     .      .  111: 			{
     .      .  112: 				fprintf(stderr, "Error! Corrupted linked list\n");
     .      .  113: 				exit(1);
     .      .  114: 			}
     .      .  115: 		}
     .      .  116: 	}
     .      .  117: 	else
     .      .  118: 	{	
     .      .  119: 		int i;
     .      .  120: 		for(i = 0; i < n_iter; i++)
     .      .  121: 		{
     .      .  122: 			switch (sync_op) 
     .      .  123: 			{
     .      .  124: 		      	case 'm':
     .      .  125: 		   		pthread_mutex_lock(&mutex);
     .      .  126: 		   		temp = SortedList_lookup(&head, elements[*offsets + i].key);
     .      .  127: 		   		if(temp == NULL)
     .      .  128: 				{
     .      .  129: 					fprintf(stderr, "Error! Corrupted linked list\n");
     .      .  130: 					exit(1);
     .      .  131: 				}
     .      .  132: 				check = SortedList_delete(temp);
     .      .  133: 				if(check == 1)
     .      .  134: 				{
     .      .  135: 					fprintf(stderr, "Error! Corrupted linked list\n");
     .      .  136: 					exit(1);
     .      .  137: 				}
     .      .  138: 		   		pthread_mutex_unlock(&mutex);
     .      .  139: 		        break;
     .      .  140: 		      	case 's':
   602    602  141: 		        while (__sync_lock_test_and_set(&spin, 1));
     1    150  142: 			    temp = SortedList_lookup(&head, elements[*offsets + i].key);
     .      .  143: 			    if(temp == NULL)
     .      .  144: 				{
     .      .  145: 					fprintf(stderr, "Error! Corrupted linked list\n");
     .      .  146: 					exit(1);
     .      .  147: 				}
     .      .  148: 				check = SortedList_delete(temp);
     .      .  149: 				if(check == 1)
     .      .  150: 				{
     .      .  151: 					fprintf(stderr, "Error! Corrupted linked list\n");
     .      .  152: 					exit(1);
     .      .  153: 				}
     .      .  154: 			    __sync_lock_release(&spin);
     .      .  155: 		        break;
     .      .  156: 	    	}
     .      .  157: 	    }
     .      .  158:     }
     .      .  159: 
     .      .  160: 
     .      .  161: 	return NULL;
     .      .  162: }
---
     .      .  163: 
     .      .  164: int main(int argc, char **argv)
     .      .  165: {
     .      .  166: 	static struct option long_options[] = {
     .      .  167: 	    {"threads", required_argument, NULL, 't'},
ROUTINE ====================== thread_func in /u/ee/ugrad/daupo/CS111/lab2a/lab2_list.c
  2720   2932 Total samples (flat / cumulative)
     .      .   27: int n_iter = 1;
     .      .   28: SortedListElement_t* elements;
     .      .   29: SortedListElement_t head;
     .      .   30: 
     .      .   31: void *thread_func(void *arg)
---
     .      .   32: {
     .      .   33: 	int *offsets = (int *)arg;
     .      .   34: 	if(opt_sync == 0)
     .      .   35: 	{
     .      .   36: 		int i;
     .      .   37: 		for(i = 0; i < n_iter; i++)
     .      .   38: 			SortedList_insert(&head, &elements[*offsets + i]);
     .      .   39: 	}
     .      .   40: 	else
     .      .   41: 	{	
     .      .   42: 		int i;
     .      .   43: 		for(i = 0; i < n_iter; i++)
     .      .   44: 		{
     .      .   45: 			switch (sync_op) 
     .      .   46: 			{
     .      .   47: 		      	case 'm':
     .      .   48: 		   		pthread_mutex_lock(&mutex);
     .      .   49: 		   		SortedList_insert(&head, &elements[*offsets + i]);
     .      .   50: 		   		pthread_mutex_unlock(&mutex);
     .      .   51: 		        break;
     .      .   52: 		      	case 's':
  2113   2113   53: 		        while (__sync_lock_test_and_set(&spin, 1));
     .     63   54: 			    SortedList_insert(&head, &elements[*offsets + i]);
     .      .   55: 			    __sync_lock_release(&spin);
     .      .   56: 		        break;
     .      .   57: 	    	}
     .      .   58: 	    }
     .      .   59:     }
     .      .   60:     int check;
     .      .   61:     if(opt_sync == 0)
     .      .   62: 		{
     .      .   63: 			check = SortedList_length(&head);
     .      .   64: 			if(check < 0)
     .      .   65: 			{
     .      .   66: 				fprintf(stderr, "Error! Corrupted linked list\n");
     .      .   67: 				exit(1);
     .      .   68: 			}
     .      .   69: 		}
     .      .   70: 	else
     .      .   71: 	{	
     .      .   72: 		switch (sync_op) 
     .      .   73: 		{
     .      .   74: 	      	case 'm':
     .      .   75: 	   		pthread_mutex_lock(&mutex);
     .      .   76: 			check = SortedList_length(&head);
     .      .   77: 			if(check < 0)
     .      .   78: 			{
     .      .   79: 				fprintf(stderr, "Error! Corrupted linked list\n");
     .      .   80: 				exit(1);
     .      .   81: 			}
     .      .   82: 	   		pthread_mutex_unlock(&mutex);
     .      .   83: 	        break;
     .      .   84: 	      	case 's':
     4      4   85: 	        while (__sync_lock_test_and_set(&spin, 1));
     .      .   86: 			check = SortedList_length(&head);
     .      .   87: 			if(check < 0)
     .      .   88: 			{
     .      .   89: 				fprintf(stderr, "Error! Corrupted linked list\n");
     .      .   90: 				exit(1);
     .      .   91: 			}
     .      .   92: 		    __sync_lock_release(&spin);
     .      .   93: 	        break;
     .      .   94:     	}
     .      .   95:     }
     .      .   96: 
     .      .   97:     SortedListElement_t *temp;
     .      .   98: 	if(opt_sync == 0)
     .      .   99: 	{
     .      .  100: 		int i;
     .      .  101: 		for(i = 0; i < n_iter; i++)
     .      .  102: 		{
     .      .  103: 			temp = SortedList_lookup(&head, elements[*offsets + i].key);
     .      .  104: 			if(temp == NULL)
     .      .  105: 			{
     .      .  106: 				fprintf(stderr, "Error! Corrupted linked list\n");
     .      .  107: 				exit(1);
     .      .  108: 			}
     .      .  109: 			check = SortedList_delete(temp);
     .      .  110: 			if(check == 1)
     .      .  111: 			{
     .      .  112: 				fprintf(stderr, "Error! Corrupted linked list\n");
     .      .  113: 				exit(1);
     .      .  114: 			}
     .      .  115: 		}
     .      .  116: 	}
     .      .  117: 	else
     .      .  118: 	{	
     .      .  119: 		int i;
     .      .  120: 		for(i = 0; i < n_iter; i++)
     .      .  121: 		{
     .      .  122: 			switch (sync_op) 
     .      .  123: 			{
     .      .  124: 		      	case 'm':
     .      .  125: 		   		pthread_mutex_lock(&mutex);
     .      .  126: 		   		temp = SortedList_lookup(&head, elements[*offsets + i].key);
     .      .  127: 		   		if(temp == NULL)
     .      .  128: 				{
     .      .  129: 					fprintf(stderr, "Error! Corrupted linked list\n");
     .      .  130: 					exit(1);
     .      .  131: 				}
     .      .  132: 				check = SortedList_delete(temp);
     .      .  133: 				if(check == 1)
     .      .  134: 				{
     .      .  135: 					fprintf(stderr, "Error! Corrupted linked list\n");
     .      .  136: 					exit(1);
     .      .  137: 				}
     .      .  138: 		   		pthread_mutex_unlock(&mutex);
     .      .  139: 		        break;
     .      .  140: 		      	case 's':
   602    602  141: 		        while (__sync_lock_test_and_set(&spin, 1));
     1    150  142: 			    temp = SortedList_lookup(&head, elements[*offsets + i].key);
     .      .  143: 			    if(temp == NULL)
     .      .  144: 				{
     .      .  145: 					fprintf(stderr, "Error! Corrupted linked list\n");
     .      .  146: 					exit(1);
     .      .  147: 				}
     .      .  148: 				check = SortedList_delete(temp);
     .      .  149: 				if(check == 1)
     .      .  150: 				{
     .      .  151: 					fprintf(stderr, "Error! Corrupted linked list\n");
     .      .  152: 					exit(1);
     .      .  153: 				}
     .      .  154: 			    __sync_lock_release(&spin);
     .      .  155: 		        break;
     .      .  156: 	    	}
     .      .  157: 	    }
     .      .  158:     }
     .      .  159: 
     .      .  160: 
     .      .  161: 	return NULL;
     .      .  162: }
---
     .      .  163: 
     .      .  164: int main(int argc, char **argv)
     .      .  165: {
     .      .  166: 	static struct option long_options[] = {
     .      .  167: 	    {"threads", required_argument, NULL, 't'},
